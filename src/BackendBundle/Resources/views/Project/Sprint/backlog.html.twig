{% extends 'BackendBundle:Default:main.html.twig' %}
{% block title %}{{'backend.sprint.backlog'|trans}}{% endblock %}
{% block content %}

    <!-- Page Heading -->
    <div class="row">
        <div class="col-lg-12">
            <h1 class="page-header">
                {{'backend.sprint.backlog'|trans}}
                <a href="{{path('backend_project_product_backlog_new',{'id':project.id, 'sprintId':sprint.id})}}" class="btn btn-primary pull-right">{{'backend.item.new'|trans}}</a>
            </h1>

            {% set item2 = {'text': project.name, 'url':path('backend_projects_view',{'id':project.id}),'icon':'fa fa-dashboard'} %}
            {% set item3 = {'text': 'backend.sprint.sprints'|trans, 'url':path('backend_project_sprints',{'id':project.id}), 'icon':'fa fa-rotate-right'} %}
            {% set item4 = {'text': 'backend.sprint.backlog'|trans, 'icon':'fa fa-list'} %}
            {% set items = [item2, item3, item4] %}
            {{ filters.breadcrum(items) }}
        </div>
    </div>
    <!-- /.row -->
    {{ filters.showMessage('messageSuccess', 'success')}}
    {{ filters.showMessage('messageError', 'danger')}}

    <div class="row">
        <div class="col-lg-7 col-md-12 col-xs-12">
            <div id="container-burndown" style="max-width: 680px; height: 500px;"></div>
        </div>
        <div class="col-lg-5 col-md-12 col-xs-12">
            <legend>{{ 'backend.sprint.details'|trans }}</legend>
            
            <div class="form-group col-md-6 col-xs-6">
                <label>{{ 'backend.sprint.start_date'|trans }}</label>
                <p>{{sprint.startDate|date(project.settings.dateFormat)}}</p>
            </div>
            <div class="form-group col-md-6 col-xs-6">
                <label>{{ 'backend.sprint.estimated_date'|trans }}</label>
                <p>{{sprint.estimatedDate|date(project.settings.dateFormat)}}</p>
            </div>
            <div class="form-group col-md-6 col-xs-6">
                <label>{{ 'backend.sprint.weekends'|trans }}</label>
                <p>{{sprint.getTextWorkWeekends()|trans }}</p>
            </div>
            <div class="form-group col-md-6 col-xs-6">
                <label>{{ 'backend.sprint.status'|trans }}</label>
                <p>{{sprint.textStatus|trans}}</p>
            </div>
            <div class="form-group col-md-6 col-xs-6">
                <label>{{ 'backend.sprint.working_days'|trans }}</label>
                <p>{{sprint.getSprintDays|length}}</p>
            </div>
            <div class="form-group col-md-6 col-xs-6">
                <label>{{'backend.sprint.total_estimated'|trans}}</label>
                <p>{{ sprint.estimatedTime }} {{'backend.global.hours'|trans|lower}}</p>
            </div>
            <div class="form-group col-md-6 col-xs-6">
                <label>{{'backend.sprint.total_worked'|trans}}</label>
                <p>{{ sprint.workedTime }} {{'backend.global.hours'|trans|lower}}</p>
            </div>
            <div class="form-group col-md-6 col-xs-6">
                <label>{{'backend.sprint.remaining_work'|trans}}</label>
                <p>{{ sprint.remainingTime }} {{'backend.global.hours'|trans|lower}}</p>
            </div>
            
            <div class="form-group col-md-12 col-xs-12">
                {% if sprint.status == constant('BackendBundle\\Entity\\Sprint::STATUS_PLANNED') %}
                    <button type="button" class="disabled btn btn-secondary btn-success">{{'backend.sprint.start_sprint'|trans}}</button>
                {% elseif sprint.status == constant('BackendBundle\\Entity\\Sprint::STATUS_IN_PROCESS') %}
                    <button type="button" class="disabled btn btn-secondary btn-danger">{{'backend.sprint.stop_sprint'|trans}}</button>
                    <button type="button" class="disabled btn btn-secondary btn-success">{{'backend.sprint.finish_sprint'|trans}}</button>
                {% elseif sprint.status == constant('BackendBundle\\Entity\\Sprint::STATUS_STOPPED') %}
                    <button type="button" class="disabled btn btn-secondary btn-success">{{'backend.sprint.finish_sprint'|trans}}</button>
                {% endif %}
            </div>
        </div>
    </div>
    <div class="rstable">
        {% for item in sprintBacklog %}
            <div class="col-lg-12 col-md-12 col-xs-12 no-padding-right main-item">
                {{ filters.itemDescription(item, project, sprint, true) }}
                {% if item.children is not empty %}
                    <div class="list-group col-lg-12 col-md-12 container-child no-padding-right">
                        {% for firstChild in item.children %}
                            {{ filters.itemDescription(firstChild, project, sprint, true) }}
                            {% if firstChild.children is not empty %}
                                <div class="list-group col-lg-12 col-md-12 container-child no-padding-right">
                                    {% for secondChild in firstChild.children %}
                                        {{ filters.itemDescription(secondChild, project, sprint, true) }}
                                        {% if secondChild.children is not empty %}
                                            <div class="list-group col-lg-12 col-md-12 container-child no-padding-right">
                                                {% for thirdChild in secondChild.children %}
                                                    {{ filters.itemDescription(thirdChild, project, sprint, true) }}
                                                    {% if thirdChild.children is not empty %}
                                                        <div class="list-group col-lg-12 col-md-12 container-child no-padding-right">
                                                            {% for fourChild in thirdChild.children %}
                                                                {{ filters.itemDescription(fourChild, project, sprint, false) }}
                                                                {% if fourChild.children is not empty %}
                                                                    <div class="list-group col-lg-12 col-md-12 container-child no-padding-right">
                                                                        {% for fifthChild in thirdChild.children %}
                                                                            {{ filters.itemDescription(fifthChild, project, sprint, false) }}
                                                                        {% endfor %}
                                                                    </div>
                                                                {% endif %}
                                                            {% endfor %}
                                                        </div>
                                                    {% endif %}
                                                {% endfor %}
                                            </div>
                                        {% endif %}
                                    {% endfor %}
                                </div>
                            {% endif %}
                        {% endfor %}
                    </div>
                {% endif %}
            </div>
        {% endfor %}
            <div class="col-lg-12 col-md-12 col-xs-12 no-padding-right main-item">
                <div class="col-xs-10 col-md-10 no-padding-left text-right">
                    {{'backend.sprint.total_estimated'|trans}}
                </div>
                <div class="col-xs-2 col-md-2 pull-right text-right">
                    {{ sprint.estimatedTime }}
                </div>
                <div class="col-xs-10 col-md-10 no-padding-left text-right">
                    {{'backend.sprint.total_worked'|trans}}
                </div>
                <div class="col-xs-2 col-md-2 pull-right text-right">
                    {{ sprint.workedTime }}
                </div>
                <div class="col-xs-10 col-md-10 no-padding-left text-right">
                    {{'backend.sprint.remaining_work'|trans}}
                </div>
                <div class="col-xs-2 col-md-2 pull-right text-right">
                    {{ sprint.remainingTime }}
                </div>
            </div>
    </div>
{% endblock %}

{% block scripts %}
        $(".create-related-item").fancybox({
            width: '840px',
            height: '500px',
            autoSize: true,
            autoScale: false,
            autoDimensions: false,
        });

        {# Codigo para que el cliente pueda eliminar items #}
        $(".delete-item").click(function () {
            var object = $(this);
            var itemId = object.attr('item-id');

            bootbox.dialog({
                message: "{{'backend.item.removal_method_message'|trans}}<br><strong>1. {{'backend.item.cascade_delete'|trans}}: </strong>{{'backend.item.cascade_delete_message'|trans}}<br><strong>2. {{'backend.item.simple_delete'|trans}}: </strong>{{'backend.item.simple_delete_message'|trans}}",
                title: "{{'backend.item.delete'|trans}}",
                buttons: {
                    success: {
                        label: "{{'backend.item.cascade_delete'|trans}}",
                        className: "btn-danger",
                        callback: function () {
                            deleteItem(itemId, "{{constant('BackendBundle\\Entity\\Item::DELETE_CASCADE')}}");
                        }
                    },
                    danger: {
                        label: "{{'backend.item.simple_delete'|trans}}",
                        className: "btn-danger",
                        callback: function () {
                            deleteItem(itemId, "{{constant('BackendBundle\\Entity\\Item::DELETE_SIMPLE')}}");
                        }
                    },
                    main: {
                        label: "{{'backend.global.cancel'|trans}}",
                        className: "btn-default",
                        callback: function () {

                        }
                    }
                }
            });
        });
        

        {# Codigo para cambiar la prioridad de los items #}
        $(".change-priority").click(function() {
            var object = $(this);
            var itemId = object.attr('item-id');
            var priority = object.attr('priority');
            
            bootbox.prompt({
                title: "{{'backend.item.change_priority'|trans}}",
                value: priority,
                buttons: {
                    confirm: {
                        label: "{{'backend.global.save_changes'|trans}}",
                        className: "btn-primary",
                    },
                    cancel: {
                        label: "{{'backend.global.cancel'|trans}}",
                        className: "btn-default",
                    }
                },
                callback: function(result) {
                    if (result != '') {
                        var newPriority = parseInt(result);
                        if (newPriority >= 0 && newPriority <= 100) {
                            $.ajax({
                                type: 'POST',
                                url: "{{path('backend_project_product_backlog_change_priority',{'id':project.id})}}",
                                dataType: 'json',
                                data: {itemId: itemId, priority: newPriority},
                                success: function (r)
                                {
                                    if (r.result == '__OK__') {
                                        window.location.reload();
                                    } else {
                                        bootbox.alert(r.msg);
                                    }
                                },
                                error: function (r)
                                {
                                    bootbox.alert("{{'backend.global.unknown_error'|trans}}")
                                }
                            });
                        } else {
                            $(".bootbox-input").select();
                            return false;
                        }
                    } else {
                        $(".bootbox-input").select();
                        return false;
                    }
                }
            });
        });
        
        {# Codigo para cambiar la estimacion de los items #}
        $(".edit-estimation").click(function() {
            var object = $(this);
            var itemId = object.attr('item-id');
            var estimation = object.attr('estimation');
            
            var htmlDialog = '';
            $.ajax({
                type: 'POST',
                url: "{{path('backend_project_product_backlog_html_edit_estimation',{'id':project.id})}}",
                dataType: 'json',
                data: {itemId: itemId, estimation: estimation},
                async: false,
                success: function (resp)
                {
                    if (resp.result == '__OK__') {
                        htmlDialog = resp.html;
                    } else {
                        bootbox.alert(resp.msg);
                    }
                }
            });
            
            bootbox.dialog({
                title: "{{'backend.item.edit_estimation'|trans}}",
                message: htmlDialog,
                buttons: {
                    success: {
                        label: "{{'backend.global.save_changes'|trans}}",
                        className: "btn-primary",
                        callback: function () {
                            var newEstimation = $('#estimated-hours-' + itemId).val();
                            if (newEstimation != '') {
                                var newEstimation = parseFloat(newEstimation);
                                if (newEstimation >= 0) {
                                    $.ajax({
                                        type: 'POST',
                                        url: "{{path('backend_project_product_backlog_edit_estimation',{'id':project.id})}}",
                                        dataType: 'json',
                                        data: {itemId: itemId, estimation: newEstimation},
                                        success: function (r)
                                        {
                                            if (r.result == '__OK__') {
                                                window.location.reload();
                                            } else {
                                                bootbox.alert(r.msg);
                                            }
                                        },
                                        error: function (r)
                                        {
                                            bootbox.alert("{{'backend.global.unknown_error'|trans}}")
                                        }
                                    });
                                } else {
                                    $('#estimated-hours-' + itemId).select();
                                    return false;
                                }
                            } else {
                                $('#estimated-hours-' + itemId).select();
                                return false;
                            }
                        }
                    },
                    main: {
                        label: "{{'backend.global.cancel'|trans}}",
                        className: "btn-default",
                        callback: function () {

                        }
                    }
                }
            });
        });
        
        {# Codigo para cambiar el tiempo trabajado en un item #}
        $(".edit-worked-time").click(function() {
            var object = $(this);
            var itemId = object.attr('item-id');
            var workedTime = object.attr('worked-time');
            
            var htmlDialog = '';
            $.ajax({
                type: 'POST',
                url: "{{path('backend_project_product_backlog_html_edit_worked_time',{'id':project.id})}}",
                dataType: 'json',
                data: {itemId: itemId, workedTime: workedTime},
                async: false,
                success: function (resp)
                {
                    if (resp.result == '__OK__') {
                        htmlDialog = resp.html;
                    } else {
                        bootbox.alert(resp.msg);
                    }
                }
            });
            
            bootbox.dialog({
                title: "{{'backend.item.edit_worked_time'|trans}}",
                message: htmlDialog,
                buttons: {
                    success: {
                        label: "{{'backend.global.save_changes'|trans}}",
                        className: "btn-primary",
                        callback: function () {
                            var newWorkedTime = $('#worked-hours-' + itemId).val();
                            if (newWorkedTime != '') {
                                var newWorkedTime = parseFloat(newWorkedTime);
                                if (newWorkedTime >= 0) {
                                    $.ajax({
                                        type: 'POST',
                                        url: "{{path('backend_project_product_backlog_edit_worked_time',{'id':project.id})}}",
                                        dataType: 'json',
                                        data: {itemId: itemId, workedTime: newWorkedTime},
                                        success: function (r)
                                        {
                                            if (r.result == '__OK__') {
                                                window.location.reload();
                                            } else {
                                                bootbox.alert(r.msg);
                                            }
                                        },
                                        error: function (r)
                                        {
                                            bootbox.alert("{{'backend.global.unknown_error'|trans}}")
                                        }
                                    });
                                } else {
                                    $('#worked-hours-' + itemId).select();
                                    return false;
                                }
                            } else {
                                $('#worked-hours-' + itemId).select();
                                return false;
                            }
                        }
                    },
                    main: {
                        label: "{{'backend.global.cancel'|trans}}",
                        className: "btn-default",
                        callback: function () {

                        }
                    }
                }
            });
        });

        {# Codigo para cambiar el estado de un item #}
        $(".change-status").click(function() {
            var object = $(this);
            var itemId = object.attr('item-id');
            var status = object.attr('status');
            
            var htmlDialog = '';
            $.ajax({
                type: 'POST',
                url: "{{path('backend_project_product_backlog_html_change_status',{'id':project.id})}}",
                dataType: 'json',
                data: {itemId: itemId, status: status},
                async: false,
                success: function (resp)
                {
                    if (resp.result == '__OK__') {
                        htmlDialog = resp.html;
                    } else {
                        bootbox.alert(resp.msg);
                    }
                }
            });
            
            bootbox.dialog({
                title: "{{'backend.item.change_status'|trans}}",
                message: htmlDialog,
                buttons: {
                    success: {
                        label: "{{'backend.global.save_changes'|trans}}",
                        className: "btn-primary",
                        callback: function () {
                            var newStatus = $('#item-status-' + itemId).val();
                            if (newStatus != '') {
                                var newStatus = parseInt(newStatus);
                                if (newStatus > 0) {
                                    $.ajax({
                                        type: 'POST',
                                        url: "{{path('backend_project_product_backlog_change_status',{'id':project.id})}}",
                                        dataType: 'json',
                                        data: {itemId: itemId, status: newStatus},
                                        success: function (r)
                                        {
                                            if (r.result == '__OK__') {
                                                window.location.reload();
                                            } else {
                                                bootbox.alert(r.msg);
                                            }
                                        },
                                        error: function (r)
                                        {
                                            bootbox.alert("{{'backend.global.unknown_error'|trans}}")
                                        }
                                    });
                                } else {
                                    $('#item-status-' + itemId).focus();
                                    return false;
                                }
                            } else {
                                $('#item-status-' + itemId).focus();
                                return false;
                            }
                        }
                    },
                    main: {
                        label: "{{'backend.global.cancel'|trans}}",
                        className: "btn-default",
                        callback: function () {

                        }
                    }
                }
            });
        });
        

        $('#container-burndown').highcharts({
            title: {
              text: "{{'backend.sprint.burndown_chart'|trans}} - {{sprint.name}}",
              x: -10 //center
            },
            scrollbar: {
                        barBackgroundColor: 'gray',
                        barBorderRadius: 7,
                        barBorderWidth: 0,
                        buttonBackgroundColor: 'gray',
                        buttonBorderWidth: 0,
                        buttonBorderRadius: 7,
                        trackBackgroundColor: 'none',
                        trackBorderWidth: 1,
                        trackBorderRadius: 8,
                        trackBorderColor: '#CCC'
                    },
            colors: ['blue', 'red'],
            plotOptions: {
              line: {
                lineWidth: 3
              },
              tooltip: {
                hideDelay: 200
              }
            },
            subtitle: {
              text: "{{'backend.sprint.sprint_progress_summary'|trans}}",
              x: -10
            },
            xAxis: {
              categories: {{listDays|json_encode()|raw}},
            },
            yAxis: {
              title: {
                text: "{{'backend.sprint.remaining_work'|trans}} ({{'backend.global.hours'|trans}})"
              },
                    type: 'linear',
                    max:{{sprint.estimatedTime}},
                    min:0,
                    tickInterval : parseInt({{sprint.estimatedTime}}/{{listDays|length}})
            },
            tooltip: {
              valueSuffix: " {{'backend.global.hours'|trans|lower}}",
              crosshairs: true,
              shared: true
            },
            legend: {
             layout: 'horizontal',
              align: 'center',
              verticalAlign: 'bottom',
              borderWidth: 0
            },
            series: [{
              name: "{{'backend.sprint.ideal_burn'|trans}}",
              color: 'rgba(255,0,0,0.25)',
              lineWidth: 2,

              data: {{idealArray|json_encode()|raw}}
            }, 
            
            {
              name: "{{'backend.sprint.actual_burn'|trans}}",
              color: 'rgba(0,120,200,0.75)',
              marker: {
                radius: 6
              },
              {% if sprint.status != constant('BackendBundle\\Entity\\Sprint::STATUS_PLANNED') %}
                data: {{actualArray|json_encode()}}
              {% else %}
                data: "{0}"
              {% endif %}
            }]
        });
    {% endblock %}

    {% block functions_javascript %}
        {# Funcion que solicita la eliminacion de un item #}
        function deleteItem(itemId, mode) {
            $.ajax({
                type: 'POST',
                url: "{{path('backend_project_product_backlog_delete',{'id':project.id})}}",
                dataType: 'json',
                data: {itemId: itemId, mode: mode},
                success: function (r)
                {
                    if (r.result == '__OK__') {
                        window.location.reload();
                    } else {
                        bootbox.alert(r.msg);
                    }
                },
                error: function (r)
                {
                    bootbox.alert("{{'backend.global.unknown_error'|trans}}")
                }
            });
        }
        
        
        

       
        
    {% endblock %}
